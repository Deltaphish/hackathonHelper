<!DOCTYPE html>
<html lang="en" class="[scrollbar-gutter:stable]">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="csrf-token" content={get_csrf_token()} />
    <.live_title default="Hackathon" suffix=" Â· Phoenix Framework">
      {assigns[:page_title]}
    </.live_title>
    
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Barlow:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap" rel="stylesheet">

    <link phx-track-static rel="stylesheet" href={~p"/assets/app.css"} />
    <script defer phx-track-static type="text/javascript" src={~p"/assets/app.js"}>
    </script>
  </head>
  <body>
    <canvas id="bg" class="absolute w-screen h-screen top-0"></canvas>
    {@inner_content}
  </body>
  <script id="vs" type="notjs">
  #version 300 es
     
    // an attribute is an input (in) to a vertex shader.
    // It will receive data from a buffer
    in vec4 a_position;
     
    // all shaders have a main function
    void main() {
     
      // gl_Position is a special variable a vertex shader
      // is responsible for setting
      gl_Position = a_position;
    }
  </script>
    <script id="fs" type="notjs">
    #version 300 es
     
    // fragment shaders don't have a default precision so we need
    // to pick one. highp is a good default. It means "high precision"
    precision highp float;

    uniform vec2 u_resolution;
    uniform float u_time;
     
    // we need to declare an output for the fragment shader
    out vec4 outColor;
     

    void main() {

      float d = 0.2;

      float t = u_time/1000.;

      vec2 st = gl_FragCoord.xy/u_resolution;

      st -= vec2(0.5,0.5);

      float r = length(st);
      float phi = atan(st.y,st.x);

      float c = mod((r-phi/(2.0*3.14)*d) - t, d);
      float fac = (smoothstep(c-0.05,c,0.2)-smoothstep(c,c+0.001,0.1));

      vec3 color = normalize(vec3(0.0,7.0,53.0))*0.26*(1.0-fac) + normalize(vec3(234.,184.,178.))*1.1*fac;

      // Plot a line

      outColor = vec4(color,1.0);
    }
  </script>
</html>
